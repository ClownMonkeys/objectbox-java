// Just too many sub projects, so each can reference rootProject.version
version = ob_version

buildscript {
    ext {
        // Typically, only edit those two:
        def objectboxVersionNumber = '3.0.0-alpha1' // without "-SNAPSHOT", e.g. '2.5.0' or '2.4.0-RC'
        def objectboxVersionRelease = true  // set to true for releasing to ignore versionPostFix to avoid e.g. "-dev" versions

        // version post fix: '-<value>' or '' if not defined; e.g. used by CI to pass in branch name
        def versionPostFixValue = project.findProperty('versionPostFix')
        def versionPostFix = versionPostFixValue ? "-$versionPostFixValue" : ''
        ob_version = objectboxVersionNumber + (objectboxVersionRelease? "" : "$versionPostFix-SNAPSHOT")
        println "ObjectBox Java version $ob_version"

        ob_expected_version = project.hasProperty('expectedVersion') ? project.property('expectedVersion') : 'UNDEFINED'

        // Core version for tests
        // Be careful to diverge here; easy to forget and hard to find JNI problems
//        ob_native_version = objectboxVersionNumber + (objectboxVersionRelease? "": "-dev-SNAPSHOT")
        // PREVIEW RELEASE, use last stable version 2.5.1 of native libraries.
        ob_native_version = '2.5.1'

        def osName = System.getProperty("os.name").toLowerCase()
        objectboxPlatform = osName.contains('linux') ? 'linux'
                : osName.contains("windows")? 'windows'
                : osName.contains("mac")? 'macos'
                : 'unsupported'

        objectboxNativeDependency = "io.objectbox:objectbox-$objectboxPlatform:$ob_native_version"
        println "ObjectBox native dependency: $objectboxNativeDependency"
    }

    ext.kotlin_version = '1.3.61'
    ext.dokka_version = '0.10.1'
    ext.junit_version = '4.13'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        // Add Kotlin plugins once. Apply in sub-projects as required.
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }

}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }
    
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'  // SNAPSHOTS
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

def projectNamesToPublish = [
        'objectbox-java-api',
        'objectbox-java',
        'objectbox-kotlin',
        'objectbox-rxjava'
]

configure(subprojects.findAll { projectNamesToPublish.contains(it.name) }) {
    apply plugin: 'maven'
    apply plugin: 'signing'

    configurations {
        deployerJars
    }

    dependencies {
        // Using an older version to remain compatible with Wagon API used by Gradle/Maven
        deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:3.2.0'
        deployerJars 'org.apache.maven.wagon:wagon-ftp:3.3.2'
    }

    signing {
        if (project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
                project.hasProperty('signing.secretKeyRingFile')) {
            sign configurations.archives
        } else {
            println "Signing information missing/incomplete for ${project.name}"
        }
    }

    // Use afterEvaluate or all dependencies will be lost in the generated POM
    afterEvaluate {
        uploadArchives {
            repositories {
                mavenDeployer {
                    def preferredRepo = project.findProperty('preferredRepo')
                    println "preferredRepo=$preferredRepo"
                    
                    if (preferredRepo == 'local') {
                        repository url: repositories.mavenLocal().url
                    } else if (preferredRepo != null 
                            && project.hasProperty('preferredUsername') 
                            && project.hasProperty('preferredPassword')) {
                        configuration = configurations.deployerJars
                        // replace placeholders
                        def repositoryUrl = preferredRepo
                                .replace('__groupId__', project.group)
                                .replace('__artifactId__', project.archivesBaseName)
                        repository(url: repositoryUrl) {
                            authentication(userName: preferredUsername, password: preferredPassword)
                        }
                    } else if (project.hasProperty('sonatypeUsername') 
                            && project.hasProperty('sonatypePassword')) {
                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                        def isSnapshot = version.endsWith('-SNAPSHOT')
                        def sonatypeRepositoryUrl = isSnapshot ?
                                "https://oss.sonatype.org/content/repositories/snapshots/"
                                : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                        repository(url: sonatypeRepositoryUrl) {
                            authentication(userName: sonatypeUsername, password: sonatypePassword)
                        }
                    } else {
                        println "Deployment settings missing/incomplete for ${project.name}."
                    }

                    pom.project {
                        packaging 'jar'
                        url 'http://objectbox.io'

                        scm {
                            url 'https://github.com/objectbox/objectbox-java'
                            connection 'scm:git@github.com:objectbox/objectbox-java.git'
                            developerConnection 'scm:git@github.com:objectbox/objectbox-java.git'
                        }

                        developers {
                            developer {
                                id 'ObjectBox'
                                name 'ObjectBox'
                            }
                        }

                        issueManagement {
                            system 'GitHub Issues'
                            url 'https://github.com/objectbox/objectbox-java/issues'
                        }

                        organization {
                            name 'ObjectBox Ltd.'
                            url 'http://objectbox.io'
                        }
                    }
                }
            }
        }
    }
}

// this task is also used by the composite build ('objectbox-deploy'), check before making changes
task installAll {
    group 'deploy'
    dependsOn ':objectbox-java-api:install'
    dependsOn ':objectbox-java:install'
    dependsOn ':objectbox-kotlin:install'
    dependsOn ':objectbox-rxjava:install'
    doLast {
        println("Installed version $version")
    }
}

// this task is also used by the composite build ('objectbox-deploy'), check before making changes
task deployAll {
    group 'deploy'
    dependsOn ':objectbox-java-api:uploadArchives'
    dependsOn ':objectbox-java:uploadArchives'
    dependsOn ':objectbox-kotlin:uploadArchives'
    dependsOn ':objectbox-rxjava:uploadArchives'
}

// this task is also used by the composite build ('objectbox-deploy'), check before making changes
task verifyVersion {
    group 'verify'
    dependsOn ':objectbox-java:verifyVersion'
    doLast {
        assert ob_expected_version == version
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
